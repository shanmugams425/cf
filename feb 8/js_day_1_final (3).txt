

call():
-------
problem:
============
const obj = {
  animal: "cats",
  sleepDuration: "12 and 16 hours",
};
obj.prototype. greet=function() {
  console.log(this.animal, "typically sleep between", this.sleepDuration);
}//not possible

obj.greet=function() {
  console.log(this.animal, "typically sleep between", this.sleepDuration);
}

var oo={}
oo //doesnt have greet()
greet.call(oo)

solution:
===========
function greet() {
  console.log(this.animal, "typically sleep between", this.sleepDuration);
}

const obj = {
  animal: "cats",
  sleepDuration: "12 and 16 hours",
};

greet.call(obj)


ex2:
====
globalThis.globProp = "Wisen";

function display() {
  console.log(`globProp value is ${this.globProp}`);
}

display.call();


display() {
  console.log(`a value is ${a} globProp value is ${this.globProp}`);
}

display.call();

globProp = "Wisen";
a=90;
function display() {
  console.log(`a value is ${a} globProp value is ${this.globProp}`);
}

display.call(globprop);
display.call(this.globprop);

globalThis.globProp = "Wisen";

function display() {
  console.log(`globProp value is ${this.globProp}`);
}

display.call(); 
console.log(this.globalThis);//wind
console.log(globalThis);//wind

bind():
----------
const module = {
  x: 42,
  getX: function() {
    return this.x;
  }
};
x=900;
const unboundGetX = module.getX;
console.log(unboundGetX()); // The function gets invoked at the global scope
// Expected output: undefined

const boundGetX = unboundGetX.bind(module);
console.log(boundGetX());
// Expected output: 42



Classes in ES6
----------------

	class - key word

two wordds in class name-  both words first char shud be in upper case


name= var	
getEmployeeName - var,meth
EmployeeDetail - class
DATEOFMONTH- enum or const

sytax:

class ClassName{
	//properties - cannot be created like this
	//constructor fns
	//methods
}

class Employee{
	var name='ajay';
	function display(){
		console.log(this.name);
	}
}



class Employee{}
undefined
var emp=new Employee();
undefined
emp
Employee {}[[Prototype]]: Object
class Employee{
    constructor(){
        console.log('obj created-emp');
    }
}
undefined
var emp=new Employee();
VM503:3 obj created-emp
undefined
var emp1={}
undefined
class Employee{
    var name='ajay'
VM661:2 Uncaught SyntaxError: Unexpected identifier 'name'
class Employee{
    constructor(name,age){
        this.name=name;
        this.age=age;
    }
}
undefined
var emp=new Employee('ajay',12);
undefined
var emp1=new Employee('vinay',22);
undefined
emp

Employee {name: 'ajay', age: 12}age: 12name: "ajay"[[Prototype]]: Objectconstructor: class Employee[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()
emp1
Employee {name: 'vinay', age: 22}age: 22name: "vinay"[[Prototype]]: Objectconstructor: class Employee[[Prototype]]: Object
emp.name
'ajay'
emp1.name
'vinay'

A class may only have one constructor
=======================================
class Trainee{
    constructor(){
        console.log('no arg');
    }
    constructor(name){
        console.log('name arg');
    }
}
VM1230:5 Uncaught SyntaxError: A class may only have one constructor


===================================================
task: Function.prototype.apply()
task: slide 52 , subclass.html
task: method chaining and encapsulation
===================================================









